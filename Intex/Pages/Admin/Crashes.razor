@page "/admin/crashes"
@page "/admin"
@inherits OwningComponentBase<ICrashesRepository>

@inject IJSRuntime JsRuntime


<table class="table table-striped">
    <thead class="thead-dark">
        <tr>
            <td>Date and Time</td>
            <td>Road Name</td>
            <td>City</td>
            <td>Crash Severity</td>
        </tr>
    </thead>

    <tbody>

        @if (CrashData?.Count() > 0)
        {
            //List the crashes
            @foreach (Crash c in CrashData)
            {
                //Display data
                <tr>
                    <td>@c.CRASH_DATETIME</td>
                    <td>@c.MAIN_ROAD_NAME</td>
                    <td>@c.CITY_ID</td>
                    <td>@c.CRASH_SEVERITY_ID</td>


                    <td>
                        <NavLink class="text-center" href="@GetDetailsUrl(c.CRASH_ID)"><img class="rounded mx-auto d-block" src="https://img.icons8.com/ios-filled/30/000000/search--v1.png" /></NavLink>
                    </td>
                    <td>
                        <NavLink class="text-center" href="@GetEditUrl(c.CRASH_ID)"><img class="rounded mx-auto d-block" src="https://img.icons8.com/ios-glyphs/30/000000/edit--v4.png"></NavLink>
                    </td>
                    <td>
                        <button style="border:none;"class="text-center" @onclick="@(x => RemoveCrash(c))"><img class="rounded mx-auto d-block" src="https://img.icons8.com/material-rounded/30/000000/filled-trash.png" /></button>
                    </td>

                </tr>
            }
        }
        else
        {
            //Return if there are no records in the database
            <tr>
                <td colspan="5" class="text-center">No Crashes in the database</td>
            </tr>
        }
    </tbody>

</table>






@code {

    public ICrashesRepository repo => Service;

    public IEnumerable<Crash> CrashData { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        CrashData = await repo.Crashes.Take(50).ToListAsync();
    }

    public string GetDetailsUrl(int id) => $"/admin/crashes/details/{id}";
    public string GetEditUrl(int id) => $"/admin/crashes/edit/{id}";

    public async Task RemoveCrash(Crash c)
    {

        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "You cannot undo this action. Would you like to proceed?");
        if (confirmed)
        {
            repo.DeleteCrash(c);
            await UpdateData();
        }

    }

}
